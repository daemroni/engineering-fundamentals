name: Build and Push Docker Image

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=daemroni_engineering-fundamentals
            -Dsonar.organization=daemroni
            -Dsonar.sources=.

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run test coverage
        run: npm run test:coverage
        continue-on-error: true

  publish-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login daemr.azurecr.io -u daemr --password-stdin

      - name: Generate and Push Git Tag for New Version
        id: versioning
        run: |
          # If no tags exist, start with v0.0
          git fetch origin --tags
          echo "Available tags:"
          git tag --list 'v[0-9]*.[0-9]*'
          
          LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*' | sort -V | tail -n1)

          # If LATEST_TAG is empty, set it to "v0.0"
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0"
          fi

          IFS='.' read -r major patch <<< "$LATEST_TAG"

          FULL_TAG="${major}.$((patch + 1))"

          echo "Determined new version: $FULL_TAG"

          # Set the FULL_TAG as an output for subsequent steps
          echo "full_tag=$FULL_TAG" >> "$GITHUB_OUTPUT"

          # Create and push the new Git tag
          git tag "$FULL_TAG"
          git push origin "$FULL_TAG"

      - name: Build the Docker image
        run: |
          docker build -t daemr.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }} -t daemr.azurecr.io/ipt-spins:latest .

      - name: Push the Docker image to ACR
        run: |
          docker push daemr.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }}
          docker push daemr.azurecr.io/ipt-spins:latest